rule "mandatory-testing-before-merge" {
  description = "Enforce comprehensive testing before any branch merge"
  when = "preparing to merge any branch or creating pull requests"
  then = "MANDATORY: Run the complete pre-merge validation process:
    1. Execute: ./scripts/pre_merge_validation.sh --verbose
    2. Execute: python scripts/run_comprehensive_tests.py --verbose
    3. Execute: python scripts/validate_all_endpoints.py --base-url http://localhost:8000
    4. Verify ALL tests pass with 0 critical failures
    5. Ensure test coverage is 90%+ for new/modified code
    6. NO EXCEPTIONS - merge is blocked if any critical test fails"
}

rule "api-endpoint-testing-required" {
  description = "Every API endpoint must have comprehensive tests"
  when = "creating, modifying, or deleting API endpoints"
  then = "REQUIRED: Create/update tests in tests/api/ that cover:
    - Successful request scenarios (200, 201 responses)
    - Error scenarios (400, 401, 403, 404, 422, 500 responses)
    - Authentication and authorization validation
    - Input validation and sanitization
    - Response schema validation
    - Edge cases and boundary conditions
    - Performance requirements (response time < 2s)
    - Update validate_all_endpoints.py if new endpoints added"
}

rule "test-coverage-enforcement" {
  description = "Maintain high test coverage standards"
  when = "adding or modifying code"
  then = "ENFORCE: Test coverage requirements:
    - Minimum 90% code coverage for new/modified code
    - Run: pytest tests/ -v --cov=backend --cov-report=html
    - Review coverage report and add tests for uncovered code
    - Critical functions must have 100% coverage
    - Integration tests required for all workflows
    - API endpoints must have both unit and integration tests"
}

rule "test-update-mandatory" {
  description = "Update test suite when making code changes"
  when = "modifying existing code or adding new features"
  then = "MANDATORY: Update tests to reflect changes:
    - Modify existing tests if behavior changes
    - Add new tests for new functionality
    - Update test data and fixtures as needed
    - Verify all tests still pass after changes
    - Update integration tests for workflow changes
    - Update API validation scripts for endpoint changes
    - NEVER commit code changes without updating corresponding tests"
}

rule "pre-merge-validation-checklist" {
  description = "Complete pre-merge validation checklist"
  when = "before merging any branch"
  then = "VERIFY: Complete checklist before merge approval:
    ✅ Code Quality:
      - All code passes flake8 and black formatting
      - Type hints are complete and accurate
      - Documentation is updated
      - No hardcoded secrets or credentials
    ✅ Test Coverage:
      - 90%+ code coverage for new/modified code
      - All new endpoints have comprehensive tests
      - Critical workflows have end-to-end tests
      - Existing functionality still works
    ✅ API Validation:
      - All endpoints return expected JSON schemas
      - Proper HTTP status codes and error messages
      - Authentication is properly enforced
      - Input validation works correctly
    ✅ Integration:
      - Database migrations are tested
      - Cross-module interactions work
      - External service integrations function
      - Performance meets requirements
    ✅ Security:
      - No security vulnerabilities detected
      - Authentication and authorization work correctly
      - Input sanitization prevents attacks
      - No sensitive data exposure"
}

rule "test-execution-order" {
  description = "Follow proper test execution sequence"
  when = "running tests or validation"
  then = "EXECUTE: Tests in this specific order:
    1. Unit tests: pytest tests/unit/ -v
    2. API tests: pytest tests/api/ -v
    3. Integration tests: pytest tests/integration/ -v
    4. File management tests: pytest tests/test_file_management.py -v
    5. API endpoint validation: python scripts/validate_all_endpoints.py
    6. Comprehensive test suite: python scripts/run_comprehensive_tests.py
    7. Pre-merge validation: ./scripts/pre_merge_validation.sh
    Each step must pass before proceeding to the next"
}

rule "test-failure-handling" {
  description = "Proper handling of test failures"
  when = "tests fail during development or validation"
  then = "REQUIRED: Follow failure resolution process:
    1. Analyze failure details and error messages
    2. Identify root cause (code bug, test issue, environment problem)
    3. Fix the underlying issue, not just the test
    4. Re-run the specific failing test suite
    5. Re-run all tests to ensure no regressions
    6. Update tests if behavior change was intentional
    7. Document any test changes in commit message
    8. NEVER disable or skip tests without justification"
}

rule "test-data-management" {
  description = "Proper test data and environment management"
  when = "creating or modifying tests"
  then = "ENSURE: Test data and environment setup:
    - Use isolated test data that doesn't affect production
    - Clean up test data after test execution
    - Use fixtures for reusable test data
    - Mock external services and dependencies
    - Use in-memory databases for unit tests
    - Test with realistic data scenarios
    - Avoid hardcoded test data in test files
    - Use environment variables for test configuration"
}

rule "performance-testing-requirements" {
  description = "Performance testing for critical components"
  when = "implementing or modifying performance-critical code"
  then = "REQUIRED: Performance testing for:
    - API endpoints (response time < 2s)
    - File upload/download operations
    - Database queries and operations
    - Workflow execution times
    - Concurrent user scenarios
    - Large data processing operations
    - Memory usage and resource consumption
    - Run: pytest tests/performance/ -v for performance tests"
}

rule "security-testing-mandatory" {
  description = "Security testing for all security-sensitive code"
  when = "implementing authentication, authorization, or data handling"
  then = "MANDATORY: Security testing for:
    - Authentication bypass attempts
    - Authorization escalation scenarios
    - Input validation and sanitization
    - SQL injection prevention
    - XSS attack prevention
    - CSRF protection
    - Data encryption and secure storage
    - API endpoint security
    - Run: bandit -r backend/ -ll for security scanning"
}