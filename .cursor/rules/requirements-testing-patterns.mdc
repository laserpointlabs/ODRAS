---
description: Testing and debugging patterns for Requirements Workbench functionality
---

# Requirements Testing & Debugging Standards

## Critical Testing Requirements

### Database Rebuild Testing
**MANDATORY**: Always test schema changes with complete rebuild:
```bash
./odras.sh clean -y && ./odras.sh init-db && ./odras.sh start
```

### Test Credentials (Always Use)
- **Username**: `das_service`
- **Password**: `das_service_2024!`
- **Purpose**: Consistent testing environment

## JavaScript Event Debugging

### Common Event Handling Issues
```javascript
// ❌ Problem: Double event handling
<tr onclick="selectRow()" ...>
  <input type="checkbox" onchange="updateSelection()" />
</tr>

// ✅ Solution: Event propagation control
<tr onclick="selectRow()" ...>
  <input type="checkbox" onchange="updateSelection(); event.stopPropagation();" />
</tr>
```

### Debugging Pattern for Modal Selection Issues
```javascript
function updateRequirementSelection() {
    console.log('🔥 updateRequirementSelection called');
    
    const checkboxes = document.querySelectorAll('#publishedRequirements input[type="checkbox"]');
    console.log(`🔥 Found ${checkboxes.length} checkboxes`);
    
    importModalSelectedRequirements.clear();
    
    checkboxes.forEach((checkbox, index) => {
        console.log(`🔥 Checkbox ${index}: id=${checkbox.dataset.requirementId}, checked=${checkbox.checked}`);
        if (checkbox.checked) {
            importModalSelectedRequirements.add(checkbox.dataset.requirementId);
        }
    });
    
    console.log(`🔥 Selected requirements:`, Array.from(importModalSelectedRequirements));
    updateImportSummary();
}
```

## Data Consistency Testing

### API Response Validation
```javascript
// Test published requirements API
const response = await fetch('/api/requirements/published-summary');
const data = await response.json();
console.log('Published projects:', data);

// Verify data consistency
data.forEach(project => {
    project.requirements.forEach(req => {
        if (req.state !== 'published' || req.is_published !== true) {
            console.error('❌ Data inconsistency:', req);
        }
    });
});
```

### Database State Verification
```sql
-- Check for data inconsistencies
SELECT requirement_id, state, is_published, published_at 
FROM requirements_enhanced 
WHERE state = 'published' AND (is_published IS FALSE OR published_at IS NULL);

-- Check import data integrity  
SELECT requirement_id, state, is_immutable, source_project_iri
FROM requirements_enhanced 
WHERE state = 'imported' AND (is_immutable IS FALSE OR source_project_iri IS NULL);
```

## Frontend Modal Testing

### Import Modal Initialization
```javascript
// Global variable pattern for modal state
let importModalSelectedRequirements = new Set();

function initializeImportModal() {
    console.log('🔥 Initializing import modal...');
    
    // Reset global state
    importModalSelectedRequirements = new Set(); 
    
    // Debug DOM elements
    console.log('🔥 sourceProjectSelect exists:', !!document.getElementById('sourceProjectSelect'));
    console.log('🔥 publishedRequirements exists:', !!document.getElementById('publishedRequirements'));
    console.log('🔥 importSummary exists:', !!document.getElementById('importSummary'));
}
```

### Selection Debugging Pattern
```javascript
// Add extensive debugging for selection issues
console.log('🔥 SELECTION_DEBUG: updateRequirementSelection called');
console.log('🔥 Global importModalSelectedRequirements:', Array.from(importModalSelectedRequirements));
console.log('🔥 Checkbox states:');
checkboxes.forEach((cb, i) => {
    console.log(`   ${i}: ${cb.dataset.requirementId} = ${cb.checked}`);
});
```

## Visual Testing Checklist

### Imported Requirements Visual Verification
- ✅ Gray background highlighting for imported rows
- ✅ Download SVG icon (not 📥 emoji)
- ✅ Lock SVG icon (not 🔒 emoji) 
- ✅ "Read-only" in Actions column
- ✅ Prefixed identifier format: `namespace.project.REQ-XXX`
- ✅ Complete source traceability in detail panel

### Publishing Workflow Testing
- ✅ No "Published" option in create modal status dropdown
- ✅ No "Published" option in edit modal status dropdown  
- ✅ Publish button visible for draft/approved requirements
- ✅ Unpublish button visible for published requirements
- ✅ Version increment on publish (1 → 2)

### Un-import Testing
- ✅ Un-import button only visible for imported requirements
- ✅ Confirmation dialog with source project info
- ✅ Complete removal from table and database
- ✅ Requirements count decrements properly

## Error Pattern Recognition

### FastAPI Route Conflicts
**Symptom**: 500 error "invalid input syntax for type uuid: 'published'"
**Cause**: Route pattern `/requirements/{requirement_id}` matching `/requirements/published`
**Fix**: Use more specific route names

### Data Inconsistency Patterns  
**Symptom**: Requirements show as published but not importable
**Cause**: `state='published'` but `is_published=false`
**Fix**: Ensure both flags set correctly in publish workflow

### JavaScript Selection Issues
**Symptom**: Checkboxes don't update import summary/button state
**Cause**: Event propagation conflicts or scope issues with global variables
**Fix**: Use global variables and stop event propagation

## Never Do
- ❌ Skip database rebuild testing
- ❌ Assume data consistency without verification
- ❌ Remove debugging logs until functionality is proven stable
- ❌ Test only with API calls - always test full UI workflow
