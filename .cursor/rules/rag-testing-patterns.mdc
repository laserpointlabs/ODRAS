---
description: Testing and debugging patterns for Requirements Workbench RAG functionality
---

# RAG Testing and Debugging Patterns

## Test Setup Automation

### Quick Setup Script
Use [quick_setup.sh](mdc:scripts/quick_setup.sh) for complete system rebuild:
```bash
./scripts/quick_setup.sh
```

**What it does**:
1. `./odras.sh clean-all -y` - Clean all data
2. `docker-compose up -d` - Start services
3. `./odras.sh init-db` - Initialize database
4. `./odras.sh start` - Start application
5. Upload and process all markdown documents
6. Test both embedding models

### Embedding Model Testing
Use [test_embedders.py](mdc:scripts/test_embedders.py) to validate both models:
```bash
python scripts/test_embedders.py
```

## RAG Service Testing Patterns

### Test Credentials
- **Username**: `das_service`
- **Password**: `das_service_2024!`
- **Purpose**: Automated testing and validation

### Standard Test Queries

#### UAS Specifications Testing
```python
test_queries = [
    "How many UAS are mentioned in total?",           # Should find all 9 UAS
    "List all UAS names with their types",            # Should categorize properly
    "What is the weight of the QuadCopter T4?",       # Should return 2.5 kg
    "Which UAS has the longest endurance?",           # Should find TriVector VTOL
    "List all Fixed-Wing UAS with their weights"      # Should filter by type
]
```

#### Requirements Testing
```python
requirements_queries = [
    "Extract all MUST requirements",                  # RFC 2119 extraction
    "What are the wind tolerance requirements?",      # Specific constraint
    "List all KPPs mentioned",                        # Performance parameters
    "What are the cost constraints?"                  # Financial requirements
]
```

### Expected Results

#### Successful RAG Performance
- **Chunks Found**: 3-9 chunks per query consistently
- **UAS Coverage**: All 9 UAS accessible (SkyEagle, WingOne, AeroMapper, QuadCopter, HexaCopter, OctoCopter, Falcon, HoverCruise, TriVector)
- **Complete Specifications**: No cut-off text, full technical details
- **RFC 2119 Extraction**: Proper MUST/SHALL/SHOULD/MAY identification

#### Collection Status
- **knowledge_chunks (384d)**: 15-25 points
- **knowledge_chunks_768 (768d)**: 10-20 points
- **Total Coverage**: All documents chunked and searchable

## Debugging Patterns

### RAG Service Debug Output
Look for these debug messages in [rag_service.py](mdc:backend/services/rag_service.py):
```
üîç VECTOR_QUERY_DEBUG: Searching for 'query' in knowledge_chunks
üîç RAG_FILTER_DEBUG: Found X accessible chunks
‚úÖ RAG_FILTER_DEBUG: SQL-first chunk found
üîç SQL_READTHROUGH_DEBUG: Enriching X chunks with SQL content
```

### Chunking Service Debug
Check chunk quality in [chunking_service.py](mdc:backend/services/chunking_service.py):
```python
# Test chunking directly
chunking_service = ChunkingService(Settings())
chunks = chunking_service.chunk_document(text, chunking_config={
    'strategy': 'simple_semantic',
    'chunk_size': 512,
    'chunk_overlap': 100
})

# Verify structured detection
is_structured = chunking_service._is_structured_specification(text)
```

### Common Issues and Solutions

#### "0 chunks found"
- **Cause**: Similarity threshold too high or collection empty
- **Fix**: Lower threshold to 0.3, check Qdrant collection status
- **Debug**: `curl -s "http://localhost:6333/collections/knowledge_chunks" | jq '.result.points_count'`

#### "Cut-off specifications"
- **Cause**: Fixed-size chunking breaking semantic boundaries
- **Fix**: Use `simple_semantic` strategy with structured detection
- **Validation**: Check chunk content contains complete UAS specs

#### "Dimension mismatch error"
- **Cause**: Embedding model dimensions don't match collection
- **Fix**: Ensure model selection logic matches collection creation
- **Debug**: Check embedding model in vector payloads

#### "Database connection pool full"
- **Cause**: Too many concurrent connections
- **Fix**: Restart application: `./odras.sh restart`
- **Prevention**: Monitor connection usage in production

## Performance Validation

### Chunking Quality Metrics
- **Complete Sections**: Each chunk contains full UAS specification
- **Proper Boundaries**: No mid-sentence or mid-specification cuts
- **Semantic Grouping**: Related content grouped together
- **Overlap Quality**: Meaningful context preservation between chunks

### RAG Quality Metrics
- **Recall**: All relevant information findable
- **Precision**: Returned chunks contain query-relevant content
- **Completeness**: Full specifications and requirements accessible
- **Consistency**: Same queries return consistent results

### DAS Response Quality
- **Accuracy**: Correct technical specifications returned
- **Completeness**: All requested information provided
- **Consistency**: Reliable performance across embedding models
- **Speed**: Reasonable response times (< 30 seconds)

## Integration Testing

### Full Stack Validation
1. Upload structured document with both embedding models
2. Verify chunks stored in correct collections
3. Test comprehensive queries covering all content
4. Validate SQL-first read-through working
5. Confirm DAS responses accurate and complete

### Regression Testing
- Test after chunking service changes
- Validate after embedding model updates
- Check after RAG service modifications
- Verify after database schema changes

Use [quick_setup.py](mdc:scripts/quick_setup.py) and [test_embedders.py](mdc:scripts/test_embedders.py) for automated validation of all patterns.
