# ODRAS Cursor Rules - Clean Repository Standards

## üéØ CRITICAL: Repository Cleanliness
- NEVER create unnecessary files in root directory
- ALWAYS organize files in appropriate directories
- KEEP root directory minimal (15 files maximum)
- PREVENT documentation sprawl - consolidate instead of creating new docs
- MAINTAIN clean structure established during September 2025 cleanup

## üìÅ File Organization Rules

### Root Directory (STRICT LIMITS)
- **README.md** - Only markdown file allowed in root
- **Essential scripts only**: odras.sh, install.sh, setup_test_knowledge_data.py
- **Standard files**: requirements.txt, docker-compose.yml, .env files
- **Config files**: .cursorrules, pytest.ini, .gitignore, etc.
- **NO logs, tests, or temporary files in root**

### Documentation (docs/ folder ONLY)
- **All .md files** (except README.md) must be in docs/
- **Use consolidated guides** instead of creating new documents
- **Follow structure**: architecture/, features/, deployment/, development/
- **Before creating new docs**: Check if existing docs can be updated instead
- **Maximum 35 documents** - consolidate if approaching limit

### Scripts (scripts/ folder ONLY)
- **All .py and .sh scripts** (except main system scripts) in scripts/
- **Remove unused scripts** instead of accumulating them
- **Test scripts carefully** before removing (preserve in cleanup/unused_scripts/ if uncertain)
- **Maximum 50 scripts** - review and clean if approaching limit

## üîß Database Management Rules

### Migration System
- **ALL migrations** must be added to odras.sh init-db function
- **Update migration_order.txt** when adding new migrations
- **Test database build** after any migration changes
- **Include ALL required collections** in Qdrant initialization

### Required Qdrant Collections
```bash
# These 5 collections are REQUIRED for ODRAS functionality:
knowledge_chunks      # Document chunks (384 dim)
knowledge_large       # OpenAI embeddings (1536 dim)  
odras_requirements    # Requirements (384 dim)
das_instructions      # DAS instructions (384 dim)
project_threads       # Project threads (384 dim) - CRITICAL for DAS
```

### User Management
- **Default users**: admin, jdehart, das_service
- **Test credentials**: das_service/das_service_2024!
- **Always test with das_service account** for automated testing

## üß™ Testing Standards

### Before ANY Database Changes
1. **Test current build**: `./odras.sh clean -y && ./odras.sh init-db`
2. **Verify all services**: Check PostgreSQL, Neo4j, Qdrant, Fuseki
3. **Test DAS functionality**: Ensure project_threads collection exists
4. **Validate migrations**: Use `python scripts/database_schema_manager.py status`

### Testing Credentials (ALWAYS USE)
- **Username**: das_service
- **Password**: das_service_2024!
- **Purpose**: Automated testing and validation

## üìã Development Workflow

### Before Creating New Files
1. **Check existing files** - can you update instead of create?
2. **Consider consolidation** - does this belong in an existing document/script?
3. **Verify location** - is this going in the right directory?
4. **Check limits** - are we approaching file count limits?

### Before Committing
1. **Verify root directory** is clean (max 15 files)
2. **Check for temporary files** that should be .gitignored
3. **Ensure database build works** if you touched migrations
4. **Test core functionality** with das_service account

### Documentation Guidelines
- **Update existing docs** instead of creating new ones
- **Use consolidated guides**: DAS_COMPREHENSIVE_GUIDE.md, TESTING_GUIDE.md, etc.
- **Keep DOCUMENT_HISTORY.md** updated for any major doc changes
- **Archive old docs** instead of deleting (preserve in cleanup/ if needed)

## üö® Red Flags (NEVER DO THIS)
- ‚ùå Create .md files in root directory (except README.md)
- ‚ùå Add scripts to root directory (except essential system scripts)
- ‚ùå Create multiple documents for same topic (consolidate instead)
- ‚ùå Add logs, test artifacts, or temporary files to Git
- ‚ùå Modify database without testing build process
- ‚ùå Create Qdrant collections without adding to odras.sh
- ‚ùå Remove scripts without checking BPMN workflow references

## üéØ Success Criteria
- **Root directory**: ‚â§15 files
- **Documentation**: ‚â§35 files, well-organized in docs/
- **Scripts**: ‚â§50 files, all actively used
- **Database build**: `./odras.sh clean -y && ./odras.sh init-db` works flawlessly
- **DAS functionality**: No collection errors, das_service account works
- **Repository size**: Minimal, no unnecessary files

## üîÑ Regular Maintenance (Monthly)
1. **Review unused scripts** - move to cleanup/unused_scripts/ if uncertain
2. **Check document count** - consolidate if approaching limits
3. **Test database build** - ensure all migrations work
4. **Verify DAS collections** - all 5 collections exist
5. **Clean temporary files** - logs, test artifacts, etc.

## üìö Reference Documentation
- **Document History**: docs/DOCUMENT_HISTORY.md
- **Architecture Guides**: docs/architecture/ (consolidated)
- **Feature Guides**: docs/features/ (consolidated)
- **Testing Guide**: docs/development/TESTING_GUIDE.md
- **Database Schema**: backend/database_schema_info.json

## üèÜ Repository Philosophy
**"Clean, Minimal, Functional"**
- Every file has a clear purpose
- Every directory is logically organized  
- Every script is actively used
- Every document provides unique value
- Every change preserves cleanliness

---

**Remember**: We spent significant effort creating this clean structure in September 2025. 
**Maintain it religiously** - it's easier to keep clean than to clean up later!

## üéØ Voice System Integration (from previous rules)
- Keep voice conversation tools talking continuously until user says "stop"
- Use voice-mode MCP tools for service management
- Test from user's standpoint, not just API calls
- Use das_service credentials for all testing

## üîß Code Quality
- Follow patterns in odras.sh for robust process management
- Use proper error handling and logging
- Implement graceful shutdowns and force killing when needed
- Check port availability before starting services