name: ODRAS Simple CI

on:
    push:
        branches: [main, develop, feature/*]
    pull_request:
        branches: [main, develop]
    workflow_dispatch:

jobs:
    test:
        name: Run Core Tests
        runs-on: ubuntu-latest

        env:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: password
            POSTGRES_DB: odras
            NEO4J_AUTH: neo4j/testpassword
            FUSEKI_ADMIN_PASSWORD: admin

        services:
            postgres:
                image: postgres:15
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: password
                    POSTGRES_DB: odras
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432

            redis:
                image: redis:7-alpine
                options: >-
                    --health-cmd "sh -c 'redis-cli ping || exit 1'"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 10
                ports:
                    - 6379:6379

            neo4j:
                image: neo4j:5
                env:
                    NEO4J_AUTH: neo4j/testpassword
                    NEO4J_dbms_security_procedures_unrestricted: apoc.*
                    NEO4J_apoc_export_file_enabled: true
                    NEO4J_apoc_import_file_enabled: true
                    NEO4J_PLUGINS: '["apoc"]'
                ports:
                    - 7474:7474
                    - 7687:7687

            qdrant:
                image: qdrant/qdrant:latest
                ports:
                    - 6333:6333
                    - 6334:6334

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.11"
                  cache: "pip"

            - name: Install dependencies
              run: |
                  sudo apt-get update
                  sudo apt-get install -y redis-tools
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install pytest pytest-asyncio psycopg2-binary

            - name: Wait for services
              run: |
                  echo "Waiting for PostgreSQL..."
                  for i in {1..60}; do
                    if pg_isready -h localhost -p 5432 -U postgres > /dev/null 2>&1; then
                      echo "✅ PostgreSQL ready!"
                      break
                    fi
                    echo "PostgreSQL not ready... ($i/60)"
                    sleep 2
                  done

                  echo "Waiting for Redis..."
                  for i in {1..60}; do
                    if redis-cli -h localhost -p 6379 ping > /dev/null 2>&1; then
                      echo "✅ Redis ready for event capture"
                      break
                    fi
                    echo "Redis not ready... ($i/60)"
                    sleep 3
                  done

                  echo "✅ All core services ready!"

            - name: Set up test environment
              run: |
                  cp test_env_config.txt .env
                  echo "Test environment configured"

            - name: Initialize database schema
              run: |
                  PGPASSWORD=password psql -h localhost -U postgres -d odras -f "backend/odras_schema.sql"

            - name: Create Qdrant collections
              run: |
                  python -c "
                  from qdrant_client import QdrantClient
                  from qdrant_client.models import Distance, VectorParams

                  client = QdrantClient(host='localhost', port=6333)

                  collections = [
                      ('knowledge_chunks', 384),
                      ('knowledge_large', 1536),
                      ('odras_requirements', 384),
                      ('das_instructions', 384),
                      ('project_threads', 384)
                  ]

                  for name, dim in collections:
                      try:
                          client.create_collection(
                              collection_name=name,
                              vectors_config=VectorParams(size=dim, distance=Distance.COSINE)
                          )
                          print(f'Created collection: {name}')
                      except Exception as e:
                          print(f'Collection {name} might already exist: {e}')
                  "

            - name: Create test users
              run: |
                  python -c "
                  import hashlib, secrets, psycopg2

                  def hash_password(password: str, salt: str) -> str:
                      password_hash = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt.encode('utf-8'), 100000)
                      return password_hash.hex()

                  conn = psycopg2.connect(host='localhost', port='5432', database='odras', user='postgres', password='password')
                  conn.autocommit = True

                  users = [
                      ('das_service', 'das_service_2024!', 'DAS Service Account', False),
                      ('admin', 'admin123!', 'Administrator', True),
                      ('jdehart', 'jdehart123!', 'J DeHart', True)
                  ]

                  with conn.cursor() as cur:
                      for username, password, display_name, is_admin in users:
                          salt = secrets.token_hex(32)
                          password_hash = hash_password(password, salt)
                          cur.execute('''
                              INSERT INTO users (username, display_name, password_hash, salt, is_admin)
                              VALUES (%s, %s, %s, %s, %s)
                              ON CONFLICT (username) DO NOTHING
                          ''', (username, display_name, password_hash, salt, is_admin))
                          print(f'Created user: {username}')

                  conn.close()
                  print('All test users created')
                  "

            - name: Start ODRAS API
              run: |
                  nohup python -m backend.main > /tmp/odras_api.log 2>&1 &
                  API_PID=$!
                  echo "ODRAS API started with PID: $API_PID"
                  sleep 20

                  # Wait for API to be ready
                  for i in {1..20}; do
                    if curl -s http://localhost:8000/api/health > /dev/null; then
                      echo "✓ ODRAS API is ready!"
                      break
                    fi
                    sleep 3
                  done

            - name: Test authentication
              run: |
                  auth_response=$(curl -s -X POST http://localhost:8000/api/auth/login \
                    -H "Content-Type: application/json" \
                    -d '{"username": "das_service", "password": "das_service_2024!"}')

                  if echo "$auth_response" | grep -q "token"; then
                    echo "✅ Authentication successful"
                  else
                    echo "❌ Authentication failed: $auth_response"
                    exit 1
                  fi

            - name: Run core functionality tests
              run: |
                  pytest tests/api/test_core_functionality.py -v --tb=short
              env:
                  PYTHONPATH: ${{ github.workspace }}

            - name: Run extended tests (optional)
              run: |
                  echo "Running extended tests (failures expected for unimplemented features)..."
                  pytest tests/api/test_project_crud.py::TestProjectCRUD::test_create_basic_project -v --tb=short || echo "Extended test completed"
              continue-on-error: true
              env:
                  PYTHONPATH: ${{ github.workspace }}
